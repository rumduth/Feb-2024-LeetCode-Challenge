1481. Least Number of Unique Integers after K Removals

//C++
class Solution {
public:
    static bool cmp(const pair<int,int>& a, const pair<int,int>& b)
    {
        return a.second < b.second;
    }
    int findLeastNumOfUniqueInts(vector<int>& arr, int k) {
        unordered_map<int, int> m;
        for(int i = 0; i < arr.size(); i++)
            m[arr[i]]++;
        vector<pair<int,int>> v(m.begin(),m.end());
        sort(v.begin(),v.end(),cmp);
        int n = v.size();
        
        for(int i = 0; i < v.size(); i++)
            if(k - v[i].second < 0)
                return n-i;
            else
                k -= v[i].second;
    
        return k;
    }
};


Time Complexity: O(NlogN)
Space Complexity: O(N


//Python 3
class Solution:
    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:
        my_arr = Counter(arr)
        my_arr = [[e,n] for e,n in my_arr.items()]
        my_arr.sort(key = lambda x: x[1])
        n = len(my_arr)
        for i in range(n):
            if k < my_arr[i][1]:
                return n - i
            else:
                k -= my_arr[i][1]
        return k