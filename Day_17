1642. Furthest Building You Can Reach

//C++
class Solution {
public:
    int furthestBuilding(vector<int>& heights, int bricks, int ladders) {
        priority_queue<int> pq;
        int n = heights.size();
        for(int i = 0; i < n - 1; i++)
        {
            int diff = heights[i+1] - heights[i];
            if(diff > 0)
            {
                bricks -= diff;
                pq.push(diff);
                if(bricks < 0)
                {
                    bricks += pq.top();
                    pq.pop();
                    ladders--;
                }
                if(ladders < 0)
                    return i;
            }
        }
        return n-1;

    }
};
Time Complexity: O(NlogN)
Space Complexity: O(N)

//Python3
class Solution:
    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:
        n = len(heights)
        pq = []
        for i in range(n-1):
            diff = heights[i+1] - heights[i]
            if(diff > 0):
                bricks -= diff
                heapq.heappush(pq,-diff)
                if bricks < 0:
                    bricks += -heapq.heappop(pq)
                    ladders -= 1
                if ladders < 0:
                    return i
        return n - 1

        