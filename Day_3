1043. Partition Array for Maximum Sum
Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.

Return the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.

//In C++

//Recursive

class Solution {
public:
    int maxSumAfterPartitioning(vector<int>& arr, int k) {
        int n = arr.size();
        vector<int> dp(n,-1);
        return helper(arr,dp,k,n-1);
    }
    int helper(vector<int>& arr, vector<int>& dp, int k, int n)
    {
        if(n < 0)
            return 0;
        if(n == 0)
            return arr[0];
        if(dp[n] != -1)
            return dp[n];
        int ans = 0;
        int max_value = arr[n];
        for(int j = 1; j <= k && n - j + 1>= 0 ; j++)
        {
            max_value = max(max_value,arr[n-j+1]);
            ans = max(ans, helper(arr,dp,k,n-j) + max_value * j);
        }
        dp[n] = ans;
        return ans;
    }
};

//Iterative
class Solution {
public:
    int maxSumAfterPartitioning(vector<int>& arr, int k) {
        int n = arr.size();
        vector<int> dp(n,-1);
        dp[0] = arr[0];
        for(int i = 1; i < n; i++)
        {
            int max_value = arr[i];
            for(int j = 1; j <= k && i - j + 1 >= 0; j++)
            {
                max_value = max(max_value,arr[i-j+1]);
                if(i - j + 1 == 0)
                    dp[i] = max(dp[i],max_value * j);
                else
                    dp[i] = max(dp[i],dp[i-j]+max_value*j);
            }
        }
        return dp[n-1];
    }
};

//In Python3

//Recursive
class Solution:
    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:

        cache = {}
        def helper(arr, n, k):
            if n < 0:
                return 0
            if n in cache:
                return cache[n]

            max_value = arr[n]
            ans = 0
            for j in range(1,k+1):
                max_value = max(max_value,arr[n-j+1])
                if n - j + 1 < 0:
                    continue
                elif n - j + 1 == 0:
                    ans = max(ans,max_value * j)
                else:
                    ans = max(ans,helper(arr,n-j,k) + max_value * j)
            cache[n] = ans
            return ans

        return helper(arr,len(arr)-1,k)
        
//Iterative
class Solution:
    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:
        n = len(arr)
        my_list = [-1] * n
        for i in range(n):
            max_value = arr[i]
            for j in range (1,k+1):
                max_value = max(max_value,arr[i-j+1])
                if i - j + 1 < 0:
                    continue
                elif i - j + 1 == 0:
                    my_list[i] = max_value * j
                else:
                    my_list[i] = max(my_list[i], my_list[i-j] + max_value * j)
        return my_list[n-1]


