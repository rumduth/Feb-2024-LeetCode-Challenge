// 279. Perfect Squares
// Given an integer n, return the least number of perfect square numbers that sum to n.

// A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.

//C++
Recursive
//class Solution {
public:
    int numSquares(int n) {
        vector<int> dp(n+1,-1);
        return helper(dp,n);
    }

    int helper(vector<int>& dp, int n)
    {
        if(n <= 0)
            return 0;
        if(n == 1)
            return 1;
        if(dp[n] != -1)
            return dp[n];
        int a = sqrt(n);
        if(a * a == n)
        {
            dp[n] = 1;
            return dp[n];
        }
        int ans = INT_MAX;
        for(int i = 1; i <= sqrt(n); i++)
            ans = min(ans,1+helper(dp,n-i*i));
        dp[n] = ans;
        return dp[n];
    }

};

//Iterative
class Solution {
public:
    int numSquares(int n) {
        if(n == 1)
            return 1;
        vector<int> dp(n+1,INT_MAX);
        dp[0] = 0;
        dp[1] = 1;
        for(int i = 2; i <= n; i++)
            for(int j = 1; j <= sqrt(i); j++)
                dp[i] = min(dp[i],1+dp[i-j*j]);
    
        return dp[n];
    }
};

Time Complexity: O(N^(3/2))
Space Complexity: O(N)

//Python3
//Iterative
class Solution:
    def numSquares(self, n: int) -> int:
        my_list = [float('inf')] * (n+1)
        if n == 1:
            return 1
        my_list[0] = 0
        my_list[1] = 1
        for i in range(2,n+1):
            for j in range(1,floor(sqrt(i))+1):
                my_list[i] = min(my_list[i],1 + my_list[i-j**2])
        return my_list[n]

        
//Recursive
class Solution:
    def numSquares(self, n: int) -> int:
        cache = {}
        def helper(n):
            if n == 0:
                return 0
            if n in cache:
                return cache[n]
            ans = float('inf')
            for i in range(1,n+1):
                for j in range(1,floor(sqrt(i)+1)):
                    ans = min(ans,1+helper(n-j*j))
            cache[n] = ans
            return ans
        return helper(n)
-->This one is TLE. Maybe in Python3, we better do the iterative approach. 