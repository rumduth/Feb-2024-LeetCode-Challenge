368. Largest Divisible Subset
Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.


//C++
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n = nums.size();

        vector<int> dp(n,1);
        int cnt = 0;
        int e = 0;
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < i; j++)
                if(nums[i] % nums[j] == 0)
                    dp[i] = max(dp[i],1+dp[j]);
            if(cnt < dp[i])
            {
                cnt = dp[i];
                e = i;
            }
        }
        vector<int> ans;
        int currentcnt = cnt;
        int currentele = nums[e];
        for(int i = e; i>=0; i--)
        {
            if(dp[i] == currentcnt && currentele % nums[i] == 0)
            {
                ans.push_back(nums[i]);
                currentcnt--;
                currentele = nums[i];
            }
        }
        return ans;
       

        
       
    }
};



Time Complexity: O(N^2)
Space Complexity: O(1)
//Python3
class Solution:
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        n = len(nums)
        nums.sort()
        cnt = 0
        e = 0
        dp = [1] * n
        for i in range(n):
            for j in range(i):
                if nums[i] % nums[j] == 0:
                    dp[i] = max(dp[i],1+dp[j])
            if cnt < dp[i]:
                cnt = dp[i]
                e = i
        
        my_ans = []
        curEle = nums[e]
        curCnt = cnt
        while e >= 0:
            if curEle % nums[e] == 0 and dp[e] == curCnt:
                my_ans.append(nums[e])
                curCnt -= 1
                curEle = nums[e]
            e -= 1
        return my_ans
        