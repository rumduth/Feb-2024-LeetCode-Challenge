<!-- 2966. Divide Array Into Arrays With Max Difference
You are given an integer array nums of size n and a positive integer k.

Divide the array into one or more arrays of size 3 satisfying the following conditions:

Each element of nums should be in exactly one array.
The difference between any two elements in one array is less than or equal to k.
Return a 2D array containing all the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return any of them.

  -->

//C++
class Solution {
public:
    vector<vector<int>> divideArray(vector<int>& nums, int k) {
        int n = nums.size();
        if(n == 0 || n % 3 != 0)
            return {};
        sort(nums.begin(),nums.end());

        vector<vector<int>> ans;

        for(int i = 0; i < n; i += 3)
        {
            if(nums[i+2] - nums[i] > k)
                return {};
            ans.push_back({nums[i],nums[i+1],nums[i+2]});
        }
        return ans;

    }
};
Time Complexity: O(NlogN)
Space Complexity: O(1)

//Python3
class Solution:
    def divideArray(self, nums: List[int], k: int) -> List[List[int]]:
        nums.sort()
        n = len(nums)
        my_list = []
        for i in range(0, n, 3):
            if nums[i + 2] > nums[i] + k:
                return None
            my_list.append([nums[i],nums[i+1],nums[i+2]])
        return my_list